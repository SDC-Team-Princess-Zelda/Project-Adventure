{"version":3,"file":"client_src_components_Ratings_RatingBreakdown_RatingList_jsx.bundle.js","mappings":"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","sources":["webpack://project-adventure/./client/src/components/Ratings/RatingBreakdown/RatingBar.jsx","webpack://project-adventure/./client/src/components/Ratings/RatingBreakdown/RatingList.jsx"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport useTracking from '@Contexts/ClickTracker';\nimport { ClickableText } from '../../../contexts/Shared.styled';\n\nexport default function RatingBar({ scorePct, id, toggleFilter }) {\n  const { trackEvent } = useTracking({ widget: 'Rating_Bar_Sort' });\n  const handleClick = (e) => {\n    trackEvent({ element: 'Sort_by_Star' });\n    const selected = e.target.className.slice(-1);\n    toggleFilter(selected);\n  };\n\n  return (\n    <RatingBarBlock>\n      <ClickableText\n        className={`${id}`}\n        onClick={handleClick}\n      >\n        {`${id} Star`}\n      </ClickableText>\n      <GreyBar>\n        <GreenBar\n          width={scorePct}\n        />\n      </GreyBar>\n    </RatingBarBlock>\n  );\n}\n\n// Style components\n\nconst RatingBarBlock = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: baseline;\n  padding : 0 0.5rem 0.5rem 0.5rem ;\n  height: 1.5rem;\n  justify-content: flex-end;\n  width: 15rem;\n  // gap: 1rem;\n  overflow: hidden;\n`;\n\nconst GreyBar = styled.div`\n  left: 1.3rem;\n  position: relative;\n  vertical-align: middle;\n  display: inline-block;\n  background-color: ${({ theme }) => theme.colors.background};\n  overflow: hidden;\n  width: 10rem;\n  height: 0.5rem;\n`;\n\nconst GreenBar = styled.div`\n  height: 0.5rem;\n  position: absolute;\n  left: 0;\n  top: 0;\n  white-space: nowrap;\n  overflow: hidden;\n  background-color: #4CAF50;\n  width: ${({ width }) => width};\n`;\n\nRatingBar.propTypes = {\n  scorePct: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  toggleFilter: PropTypes.func.isRequired,\n};\n","/* eslint-disable react/prop-types */\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nimport { useMeta } from '../../../contexts/ReviewMeta';\nimport RatingBar from './RatingBar';\n\nexport default function RatingList({ toggleFilter, filterStatus, clearFilter }) {\n  const starList = [];\n  const [activeTags, setActiveTags] = useState({\n    tags: [],\n    filterOn: false,\n  });\n  const currentMeta = useMeta();\n\n  if (currentMeta) {\n    const { ratings, totalCT } = currentMeta;\n    const starArray = [5, 4, 3, 2, 1];\n    starArray.forEach((key) => {\n      const currentCT = Number(ratings[key]);\n      if (Number.isNaN(currentCT)) {\n        starList.push({ id: key, score: 0 });\n      } else {\n        starList.push({ id: key, score: currentCT / totalCT });\n      }\n    });\n  }\n\n  useEffect(() => {\n    const tags = [];\n    if (filterStatus.filterCount) {\n      Object.keys(filterStatus).forEach((key) => {\n        if (key !== 'filterCount') {\n          // eslint-disable-next-line no-unused-expressions\n          filterStatus[key] && tags.push(`${key} Star`);\n        }\n      });\n      setActiveTags({\n        tags,\n        filterOn: true,\n      });\n    } else {\n      setActiveTags({\n        tags: [],\n        filterOn: false,\n      });\n    }\n  }, [filterStatus.filterCount]);\n\n  return (\n    <Ratings>\n      {starList.map((item) => (\n        <RatingBar\n          key={item.id}\n          scorePct={`${Math.floor((item.score) * 100)}%`}\n          id={item.id.toString()}\n          toggleFilter={toggleFilter}\n        />\n      ))}\n      {activeTags.filterOn ? (\n        <ClearFilter onClick={clearFilter}>\n          Remove all filters\n        </ClearFilter>\n      ) : ''}\n      {activeTags.tags.length ? (\n        <SortingTags>\n          {'Active Tags are : '}\n          {activeTags.tags.join(', ')}\n        </SortingTags>\n      ) : ''}\n    </Ratings>\n  );\n}\n\n// Style components\nconst Ratings = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 1rem;\n  padding-right: 3rem;\n`;\n// TODO:make this pretty\nconst SortingTags = styled.div`\n`;\nconst ClearFilter = styled.button`\n  background-color: transparent;\n  border: none;\n  text-decoration: underline;\n`;\n// TODO: figure out nested proptype\nRatingList.propTypes = {\n  toggleFilter: PropTypes.func.isRequired,\n};\n"],"names":["React","styled","PropTypes","useTracking","ClickableText","RatingBar","scorePct","id","toggleFilter","widget","trackEvent","handleClick","e","element","selected","target","className","slice","RatingBarBlock","div","GreyBar","theme","colors","background","GreenBar","width","propTypes","string","isRequired","func","useEffect","useState","useMeta","RatingList","filterStatus","clearFilter","starList","tags","filterOn","activeTags","setActiveTags","currentMeta","ratings","totalCT","starArray","forEach","key","currentCT","Number","isNaN","push","score","filterCount","Object","keys","map","item","Math","floor","toString","length","join","Ratings","SortingTags","ClearFilter","button"],"sourceRoot":""}